{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "dothttp-vscode",
    "fileTypes": [
        "http",
        "rest",
        "dhttp"
    ],
    "scopeName": "source.dothttp-vscode",
    "patterns": [
        {
            "begin": "\\bvar\\b",
            "end": "(?=;|\\n|$)",
            "name": "meta.variable.declaration.custom",
            "patterns": [
                {
                    "match": "\\bvar\\b",
                    "name": "keyword.declaration.custom"
                },
                {
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                    "name": "variable.name.custom"
                },
                {
                    "match": "=",
                    "name": "keyword.operator.assignment.custom"
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "http.request.body.javascript"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.custom",
                    "patterns": [
                        {
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "name": "string.interpolated.custom",
                            "patterns": [
                                {
                                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                                    "name": "variable.interpolation.custom"
                                }
                            ]
                        }
                    ]
                },
                {
                    "match": "\\b\\d+\\.\\d+\\b",
                    "name": "constant.numeric.float.custom"
                },
                {
                    "match": "\\b\\d+\\b",
                    "name": "constant.numeric.integer.custom"
                },
                {
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.boolean.custom"
                },
                {
                    "begin": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(",
                    "end": "\\)",
                    "name": "meta.function-call.custom",
                    "patterns": [
                        {
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                            "name": "variable.parameter.custom"
                        }
                    ]
                }
            ]
        },
        {
            "begin": "^\\s*>\\s{1}{%?\\s*",
            "name": "http.request.body.script",
            "end": "^\\s*%} (python)?\\s*",
            "patterns": [
                {
                    "include": "source.python"
                }
            ]
        },
        {
            "begin": "\\s*(?=(\\[|{[^{]))",
            "name": "http.request.body.json",
            "end": "^\\s*(\\#{3,}.*?)?\\s*$",
            "endCaptures": {
                "0": {
                    "name": "comment.line.sharp.http"
                }
            },
            "patterns": [
                {
                    "include": "source.javascript"
                }
            ]
        },
        {
            "include": "#comment"
        },
        {
            "include": "#number"
        },
        {
            "include": "#language_keyword"
        },
        {
            "include": "#language_operation"
        },
        {
            "include": "#regular_expression"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#string-quoted-single-multiline"
        },
        {
            "include": "#string-quoted-double-multiline"
        },
        {
            "include": "#object"
        },
        {
            "include": "#string"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "match": "#.*",
                    "name": "comment.line"
                },
                {
                    "match": "//.*",
                    "name": "comment.line"
                },
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "variables": {
            "begin": "{{\\s*(\\w+)\\s*=\\s*(\\w*)\\s*?",
            "end": "}}",
            "name": "variable.parameter",
            "beginCaptures": {
                "0": {
                    "name": "variable.name"
                },
                "1": {
                    "name": "constant"
                }
            }
        },
        "json": {
            "begin": "((json)|(data))[\\s]*(",
            "end": ")",
            "name": "entity.name.class",
            "patterns": [
                {
                    "include": "#object"
                }
            ]
        },
        "name": {
            "begin": "@name\\(",
            "end": "\\)",
            "name": "entity.name.method",
            "patterns": [
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "support.type.property-name"
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "support.type.property-name"
                }
            ]
        },
        "url": {
            "begin": "(GET|POST|DELETE|OPTIONS|CONNECT|PUT|HEAD|TRACE)\\s*",
            "beginCaptures": {
                "0": {
                    "name": "variable.other.enummember"
                }
            },
            "end": ".*",
            "endCaptures": {
                "0": {
                    "name": "markup.bold"
                }
            }
        },
        "header": {
            "begin": "(\\w*|\\\".*\\\"|'.*')\\s*[:]",
            "end": "(\\w*|\\\".*\\\")",
            "beginCaptures": {
                "0": {
                    "name": "support.type.property-name"
                },
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "support.property-value"
                }
            },
            "name": "dothttp.header"
        },
        "query": {
            "begin": "(\\?)\\s*(\\w*|\\\".*\\\"|'.*')\\s*[,=:]",
            "end": "(\\w*|\\\".*\\\")",
            "beginCaptures": {
                "0": {
                    "name": "support.type.property-name.json"
                },
                "1": {
                    "name": "keyword"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "support.property-value"
                }
            },
            "name": "dothttp.query"
        },
        "varstring": {
            "patterns": [
                {
                    "name": "string.quoted.double",
                    "begin": "\\{\\{",
                    "end": "\\}\\}"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.quoted.single",
                    "begin": "'",
                    "end": "'"
                },
                {
                    "name": "string.quoted.double",
                    "begin": "\"",
                    "end": "\""
                }
            ]
        },
        "string-quoted-single-multiline": {
            "begin": "'''",
            "end": "'''",
            "name": "string.quoted.triple",
            "patterns": []
        },
        "string-quoted-double-multiline": {
            "begin": "\"\"\"",
            "end": "\"\"\"",
            "name": "string.quoted.triple",
            "patterns": []
        },
        "number": {
            "patterns": [
                {
                    "match": "\\b[0-9]+\\b\\.{0,1}",
                    "name": "constant.numeric"
                }
            ]
        },
        "language_keyword": {
            "patterns": [
                {
                    "match": "json",
                    "name": "keyword.other"
                },
                {
                    "match": "header",
                    "name": "support.class"
                },
                {
                    "match": "\\(",
                    "name": "constant.language"
                },
                {
                    "match": "\\,",
                    "name": "constant.language"
                },
                {
                    "match": "\\)",
                    "name": "constant.language"
                },
                {
                    "match": "\\:",
                    "name": "constant.language"
                },
                {
                    "match": "basicauth",
                    "name": "support.class"
                },
                {
                    "match": "query",
                    "name": "keyword.other"
                },
                {
                    "match": "\\=",
                    "name": "constant.language"
                },
                {
                    "match": "data",
                    "name": "keyword.other"
                },
                {
                    "match": "urlencoded",
                    "name": "keyword.other"
                },
                {
                    "match": "text",
                    "name": "keyword.other"
                },
                {
                    "match": "fileinput",
                    "name": "keyword.other"
                },
                {
                    "match": "insecure",
                    "name": "keyword.control"
                },
                {
                    "match": "clear",
                    "name": "keyword.control"
                },
                {
                    "match": "certificate",
                    "name": "keyword.operator"
                },
                {
                    "match": "p12",
                    "name": "keyword.other"
                },
                {
                    "match": "cert",
                    "name": "keyword.other"
                },
                {
                    "match": "password",
                    "name": "keyword.other"
                },
                {
                    "match": "digestauth",
                    "name": "keyword.operator"
                },
                {
                    "match": "basicauth",
                    "name": "keyword.operator"
                },
                {
                    "match": "file",
                    "name": "keyword.other"
                },
                {
                    "match": "key",
                    "name": "keyword.other"
                },
                {
                    "include": "#varstring"
                },
                {
                    "match": "files",
                    "name": "keyword.other"
                },
                {
                    "match": "form",
                    "name": "keyword.other"
                },
                {
                    "match": "multipart",
                    "name": "keyword.other"
                },
                {
                    "match": "output",
                    "name": "keyword.other"
                },
                {
                    "match": "null",
                    "name": "constant.language"
                },
                {
                    "match": "true",
                    "name": "constant.language"
                },
                {
                    "match": "false",
                    "name": "constant.language"
                },
                {
                    "include": "#name"
                },
                {
                    "include": "#url"
                },
                {
                    "include": "#query"
                }
            ]
        },
        "language_operation": {
            "patterns": []
        },
        "regular_expression": {
            "patterns": []
        }
    }
}