name: Publish Stable

on:
  push:
    branches:
      - deploy-2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  version: 0.0.42a10

jobs:
  build:
    name: Publish Stable
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Setup Environment
        run: node -e "console.log('PACKAGE_VERSION=' + require('./package.json').version + '\nPACKAGE_NAME=' + require('./package.json').name + '-' + require('./package.json').version)" >> $GITHUB_ENV
      # - name: Verify versions
      #   run: node -e "if ('refs/tags/v' + '${{ env.PACKAGE_VERSION }}' !== '${{ github.ref }}') { console.log('::error' + 'Version Mismatch. refs/tags/v' + '${{ env.PACKAGE_VERSION }}', '${{ github.ref }}'); throw Error('Version Mismatch')} "
      - name: Install
        run: |
          npm install --legacy-peer-deps
      - name: Package extension
        run: |
          # npm install @vscode/vsce --global
          # win32-ia32 linux-armhf alpine-x64 alpine-arm64
          for target  in win32-x64 win32-arm64 linux-x64 linux-arm64 darwin-x64 darwin-arm64 web
          do
            if [[ $target == win32* ]]; then
                os=x86-windows
            elif [[ $target == linux-x64 ]]; then
                os=linux-amd64
            elif [[ $target == linux-arm64 ]]; then
                os=linux-arm64
            elif [[ $target == darwin* ]]; then
                os=darwin
            fi
            wget https://github.com/cedric05/dotextensions-build/releases/download/v-${{ env.version }}/dotextensions-${{ env.version }}-$os.zip
            unzip dotextensions-0.0.42a10-$os.zip
            npx vsce package --target $target
          done
          ls
      - name: Upload to visualstudio
        continue-on-error: true
        run: |
          npx vsce publish --packagePath ./${{ env.PACKAGE_NAME }}.vsix -p ${{ secrets.MARKETPLACE_PAT }}
      - name: Upload to openvsx
        continue-on-error: true
        run: |
          npx ovsx publish ./${{ env.PACKAGE_NAME }}.vsix -p ${{ secrets.OVSX_ACCESS_TOKEN }}
      # - name: Create GitHub release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: v${{ env.PACKAGE_VERSION }}
      #     body: ${{ steps.changelog.outputs.changes }}
      #     draft: false
      #     prerelease: false
      # - name: Upload GitHub release
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ env.PACKAGE_NAME }}.vsix
      #     asset_name: ${{ env.PACKAGE_NAME }}.vsix
      #     asset_content_type: application/zip
